import { createClientProvider, EntityFacade } from '@devmx/shared-data-access';
import { <%= className %>, Editable<%= className %> } from '@devmx/shared-api-interfaces';
import {
  Create<%= className %>UseCase,
  Delete<%= className %>UseCase,
  Find<%= className %>ByIDUseCase,
  Find<%= className %>sUseCase,
  Update<%= className %>UseCase,
} from '@devmx/<%= scope %>-domain/client';

export class <%= className %>Facade extends EntityFacade<<%= className %>> {
  constructor(
    private create<%= className %>UseCase: Create<%= className %>UseCase,
    private find<%= className %>sUseCase: Find<%= className %>sUseCase,
    private find<%= className %>ByIdUseCase: Find<%= className %>ByIDUseCase,
    private update<%= className %>UseCase: Update<%= className %>UseCase,
    private delete<%= className %>UseCase: Delete<%= className %>UseCase
  ) {
    super({
      response: { data: [], items: 0, pages: 0 },
      params: {
        page: 0,
        size: 10,
        filter: { name: '' },
      },
      selected: null,
    });
  }

  load() {
    this.onLoad(this.find<%= className %>sUseCase.execute(this.state.params));
  }

  loadOne(id: string) {
    this.onLoadOne(this.find<%= className %>ByIdUseCase.execute(id));
  }

  create(data: Editable<%= className %>) {
    this.onCreate(this.create<%= className %>UseCase.execute(data));
  }

  update(data: Editable<%= className %>) {
    this.onUpdate(this.update<%= className %>UseCase.execute(data));
  }

  delete(id: string) {
    this.onDelete(this.delete<%= className %>UseCase.execute(id));
  }
}

export function provide<%= className %>Facade() {
  return createClientProvider(<%= className %>Facade, [
    Create<%= className %>UseCase,
    Find<%= className %>sUseCase,
    Find<%= className %>ByIDUseCase,
    Update<%= className %>UseCase,
    Delete<%= className %>UseCase,
  ]);
}
